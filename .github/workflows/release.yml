name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0, v2.1.3

jobs:
  build-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 您可以根据需要调整 Go 版本

      - name: Set up build variables
        id: vars
        run: |
          # 从 tag 中提取版本号 (移除 'v' 前缀)
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # 定义二进制文件名 (可以自定义)
          BINARY_NAME="ffmpeg_downloader"
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
          # 创建输出目录
          mkdir -p dist

      - name: Build for Linux (amd64)
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/${{ steps.vars.outputs.binary_name }}-linux-amd64 main.go
          tar -czvf dist/${{ steps.vars.outputs.binary_name }}-linux-amd64.tar.gz -C dist ${{ steps.vars.outputs.binary_name }}-linux-amd64

      - name: Build for Windows (amd64)
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/${{ steps.vars.outputs.binary_name }}-windows-amd64.exe main.go
          zip -j dist/${{ steps.vars.outputs.binary_name }}-windows-amd64.zip dist/${{ steps.vars.outputs.binary_name }}-windows-amd64.exe

      - name: Build for macOS (amd64)
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/${{ steps.vars.outputs.binary_name }}-macos-amd64 main.go
          tar -czvf dist/${{ steps.vars.outputs.binary_name }}-macos-amd64.tar.gz -C dist ${{ steps.vars.outputs.binary_name }}-macos-amd64

      - name: Build for macOS (arm64)
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/${{ steps.vars.outputs.binary_name }}-macos-arm64 main.go
          tar -czvf dist/${{ steps.vars.outputs.binary_name }}-macos-arm64.tar.gz -C dist ${{ steps.vars.outputs.binary_name }}-macos-arm64

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.zip,dist/*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release for version ${{ steps.vars.outputs.version }}"
          draft: false
          prerelease: false # 如果希望创建预发布版本，请设置为 true 